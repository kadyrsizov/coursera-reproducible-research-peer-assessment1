library(RMySQL)
library(xlsx)
library(xlsxjars)
library(rJava)
library(RSQLite)
cat("\014")
library(sqldf)
install.packages("digest")
library(sqldf)
cat("\014")
library(sqldf)
rm("\014")
cat("\014")
library(sqldf)
p_code<-1:12
v1<-rnorm(12)
v2<-0
v3sum<-0
vmax<-0
table1<-data.frame(p_code,v1,v2=0,v3sum,vmax)
View(table1)
table1$v3sum<-table1$v1+table1$v2
table1$vmax<-300
v2<-rep(2:7,50)
table2<-data.frame(p_codex=0,p_code=0,v2)
View(table2)
fn<-function(x){
table2$p_codex<-x
table2$p_code<-round(table2$p_codex,0)
table2_1<-merge(table2,table1,all.y=TRUE)
table2_1$v3sum<-table1$v1+table1$v2
View(table2_1)
return(sum(table2_1$v3sum))
}
fnOgr<-function(x){
table2$p_code<-x[1:ncol(table2)]
table2_1<-merge(table2,table1,all.y=TRUE)
table2_1$v3sum<-table1$v1+table1$v2
return(table2_1$v3sum)
}
constraints<-table1$vmax
x0<-table2$p_code
sol1<-solnp(x0, fun = fn, eqfun = fnOgr, eqB = constraints)
library(Rsolnp)
p_code<-1:12
v1<-rnorm(12)
v2<-0
v3sum<-0
vmax<-0
table1<-data.frame(p_code,v1,v2=0,v3sum,vmax)
View(table1)
table1$v3sum<-table1$v1+table1$v2
table1$vmax<-300
v2<-rep(2:7,50)
table2<-data.frame(p_codex=0,p_code=0,v2)
View(table2)
fn<-function(x){
table2$p_codex<-x
table2$p_code<-round(table2$p_codex,0)
table2_1<-merge(table2,table1,all.y=TRUE)
table2_1$v3sum<-table1$v1+table1$v2
View(table2_1)
return(sum(table2_1$v3sum))
}
fnOgr<-function(x){
table2$p_code<-x[1:ncol(table2)]
table2_1<-merge(table2,table1,all.y=TRUE)
table2_1$v3sum<-table1$v1+table1$v2
return(table2_1$v3sum)
}
constraints<-table1$vmax
x0<-table2$p_code
sol1<-solnp(x0, fun = fn, eqfun = fnOgr, eqB = constraints)
install.packages("gurobi")
install.packages("gurobi")
cat("\014")
if(!(file.exists("summarySCC_PM25.rds") & file.exists("Source_Classification_Code.rds")))
{
unzip(archiveFile)
}
#Course: Reproducible research
# Read Activity monitoring data ('amd') data set from the working directory
#Set working directory
setwd("C:\Users\Dana\Desktop\Projects\coursera\Reproducible Research\Week2")
# make sure the sources data folder exists
if (!file.exists('source data')) {
dir.create('source data')
}
# Download file, if it does not exist
archiveFile <- "source data/repdata_2Fdata_2Factivity.zip"
if(!file.exists(archiveFile)) {
file.url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(file.url,destfile=archiveFile)
unzip(archiveFile,exdir='source data',overwrite=TRUE)
}
if(!(file.exists("summarySCC_PM25.rds") & file.exists("Source_Classification_Code.rds")))
{
unzip(archiveFile)
}
cat("\014")
#Course: Reproducible research
# Read Activity monitoring data ('amd') data set from the working directory
#Set working directory
setwd("C:\Users\Dana\Desktop\Projects\coursera\Reproducible Research\Week2")
# make sure the sources data folder exists
if (!file.exists('source data')) {
dir.create('source data')
}
#Course: Reproducible research
# Read Activity monitoring data ('amd') data set from the working directory
#Set working directory
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
# make sure the sources data folder exists
if (!file.exists('source data')) {
dir.create('source data')
}
# Download file, if it does not exist
archiveFile <- "source data/repdata_2Fdata_2Factivity.zip"
if(!file.exists(archiveFile)) {
file.url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(file.url,destfile=archiveFile)
unzip(archiveFile,exdir='source data',overwrite=TRUE)
}
#Course: Reproducible research
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "repdata_2Fdata_2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
#Course: Reproducible research
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "repdata_2Fdata_2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
#Course: Reproducible research
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "repdata_2Fdata2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
#Course: Reproducible research
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "repdata_2Fdata2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
#Course: Reproducible research
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "repdata2Fdata2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
#Course: Reproducible research
#Set up the working directory
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "repdata_2Fdata2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
#Course: Reproducible research
#Set up the working directory
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "source data/repdata_2Fdata2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
#Course: Reproducible research
#Set up the working directory
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "source data/repdata_2Fdata2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(filename, overwrite = TRUE)
}
#Course: Reproducible research
#Set up the working directory
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
#Download file and place the ZIP file into data directory
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# destination filename, will automatically save to current directory
filename <- "source data/repdata_2Fdata2Factivity.zip"
# Download and unzip the dataset.
if (!file.exists(filename)){# check if file existed already and delete it then retrieve it
download.file(fileURL, filename)
unzip(fileUrl, overwrite = TRUE)
}else {
file.remove(filename)
download.file(fileURL, filename)
unzip(fileUrl, overwrite = TRUE)
}
#Course: Reproducible research
#Set up the working directory
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
# make sure the sources data folder exists
if (!file.exists('source data')) {
dir.create('source data')
}
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/repdata_2Fdata2Factivity.zip')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(file.url,destfile='source data/repdata_2Fdata2Factivity.zip')
unzip('source data/repdata_2Fdata2Factivity.zip',exdir='source data',overwrite=TRUE)
# Read Activity monitoring data ('amd') data set from the working directory
amd <- read.csv("./source data/activity.csv", stringsAsFactors = FALSE)
} else {
# Read Activity monitoring data ('amd') data set from the working directory
amd <- read.csv("./source data/activity.csv", stringsAsFactors = FALSE)
}
# remove the large raw data set
if (file.exists('source data/repdata_2Fdata2Factivity.zip')) {
x<-file.remove('source data/repdata_2Fdata2Factivity.zip')
}
#Course: Reproducible research
#Set up the working directory
setwd("C:/Users/Dana/Desktop/Projects/coursera/Reproducible Research/Week2")
# make sure the sources data folder exists
if (!file.exists('source data')) {
dir.create('source data')
}
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/repdata_2Fdata2Factivity.zip')) {
# download the zip file and unzip
unzip('source data/repdata_2Fdata_2Factivity.zip',exdir='source data',overwrite=TRUE)
# Read Activity monitoring data ('amd') data set from the working directory
amd <- read.csv("./source data/activity.csv", stringsAsFactors = FALSE)
} else {
# Read Activity monitoring data ('amd') data set from the working directory
amd <- read.csv("./source data/activity.csv", stringsAsFactors = FALSE)
}
amd
View(amd)
View(amd)
library(dplyr)
total.steps.per.day <- amd %.% group_by(date) %.% summarise(total = sum(steps,
na.rm = T))
total.steps.per.day <- amd %>% group_by(date) %>% summarise(total = sum(steps,
na.rm = T))
total.mean <- mean(total.steps.per.day$total)
print(total.mean)
View(total.steps.per.day)
library(ggplot2)
# Set default font size for all ggplot2 plots
theme_set(theme_gray(base_size = 14))
# The histogram display a general distribution of numbers which are total
# steps for each day in our data.
ggplot(total.steps.per.day, aes(x = total)) + geom_histogram(fill = "yellow",
colour = "black") + geom_vline(xintercept = total.mean, color = "brown",
linetype = "dashed", size = 1) + geom_vline(xintercept = total.median, color = "red",
linetype = "dashed", size = 1) + labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
library(ggplot2)
# Set default font size for all ggplot2 plots
theme_set(theme_gray(base_size = 14)
ggplot(total.steps.per.day, aes(x = total)) + geom_histogram(fill = "yellow",
colour = "black") + geom_vline(xintercept = total.mean, color = "brown",
linetype = "dashed", size = 1) + geom_vline(xintercept = total.median, color = "red",
linetype = "dashed", size = 1) + labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
library(ggplot2)
# Set default font size for all ggplot2 plots
theme_set(theme_gray(base_size = 14))
ggplot(total.steps.per.day, aes(x = total)) + geom_histogram(fill = "yellow",colour = "black") +
geom_vline(xintercept = total.mean, color = "brown",linetype = "dashed", size = 1) +
geom_vline(xintercept = total.median, color = "red",linetype = "dashed", size = 1) +
labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
# Group observations by date and sum steps taken per each day
library(dplyr)
total.steps.per.day <- amd %>% group_by(date) %>% summarise(total = sum(steps,
na.rm = T))
# Define total mean and total median of steps sums for each day
total.mean <- mean(total.steps.per.day$total)
print(total.mean)
library(ggplot2)
# Set default font size for all ggplot2 plots
theme_set(theme_gray(base_size = 14))
# The histogram display a general distribution of numbers which are total
# steps for each day in our data.
ggplot(total.steps.per.day, aes(x = total)) + geom_histogram(fill = "yellow",colour = "black") +
geom_vline(xintercept = total.mean, color = "brown",linetype = "dashed", size = 1) +
geom_vline(xintercept = total.median, color = "red",linetype = "dashed", size = 1) +
labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
total.median <- median(total.steps.per.day$total)
print(total.median)
library(ggplot2)
# Set default font size for all ggplot2 plots
theme_set(theme_gray(base_size = 14))
# The histogram display a general distribution of numbers which are total
# steps for each day in our data.
ggplot(total.steps.per.day, aes(x = total)) + geom_histogram(fill = "yellow",colour = "black") +
geom_vline(xintercept = total.mean, color = "brown",linetype = "dashed", size = 1) +
geom_vline(xintercept = total.median, color = "red",linetype = "dashed", size = 1) +
labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
ggplot(total.steps.per.day, aes(date, total)) + geom_bar(fill = "chartreuse",
colour = "black") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed",
size = 1) + geom_hline(yintercept = total.median, color = "red", linetype = "dashed",
size = 1) + labs(title = "Total number of steps for each particular day") +
labs(x = "Date", y = "Total number of steps")
ggplot(total.steps.per.day, aes(date, total)) + geom_bar(fill = "chartreuse",colour = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed", size = 1) +
geom_hline(yintercept = total.median, color = "red", linetype = "dashed", size = 1) +
labs(title = "Total number of steps for each particular day") + labs(x = "Date", y = "Total number of steps")
ggplot(total.steps.per.day, aes(date, total))
ggplot(total.steps.per.day, aes(date, total))+ geom_bar(fill = "chartreuse",colour = "black")
ggplot(total.steps.per.day, aes(date, total)) + geom_bar(fill = "chartreuse",
colour = "black")
ggplot(total.steps.per.day, aes(date, total))
ggplot(total.steps.per.day, aes(date, total))
ggplot(total.steps.per.day, aes(x = total)) + geom_histogram(fill = "yellow",colour = "black") +
geom_vline(xintercept = total.mean, color = "brown",linetype = "dashed", size = 1) +
geom_vline(xintercept = total.median, color = "red",linetype = "dashed", size = 1) +
labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
ggplot(total.steps.per.day, aes(x = date,total)) + geom_histogram(fill = "yellow",colour = "black") +
geom_vline(xintercept = total.mean, color = "brown",linetype = "dashed", size = 1) +
geom_vline(xintercept = total.median, color = "red",linetype = "dashed", size = 1) +
labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
ggplot(total.steps.per.day, aes(x = date,total)) + geom_bar(fill = "chartreuse",colour = "black") +
geom_vline(xintercept = total.mean, color = "brown",linetype = "dashed", size = 1) +
geom_vline(xintercept = total.median, color = "red",linetype = "dashed", size = 1) +
labs(title = "Histogram of total number of steps \n taken for each day") +
labs(x = "", y = "")
avg.intvl.steps <- amd %>% group_by(interval) %>% summarise(avg.intvl = mean(steps,
na.rm = T))
max.num.of.steps.interv.ind <- which(avg.intvl.steps$avg.intvl == max(avg.intvl.steps$avg.intvl))
max.num.of.steps.interv <- avg.intvl.steps[max.num.of.steps.interv.ind, 1]
qplot(interval, avg.intvl, data = avg.intvl.steps) + geom_line() + geom_vline(xintercept = max.num.of.steps.interv,
color = "red", linetype = "dashed", size = 1) + labs(title = "Time series of the 5-minute interval and the average number of steps taken, \n averaged across all days") +
labs(x = "5-minute interval signature", y = "number of steps ")
# Find out which 5-minute interval contains the maximum number of steps
max.num.of.steps.interv.ind <- which(avg.intvl.steps$avg.intvl == max(avg.intvl.steps$avg.intvl))
max.num.of.steps.interv <- avg.intvl.steps[max.num.of.steps.interv.ind, 1]
qplot(interval, avg.intvl, data = avg.intvl.steps) + geom_line() + geom_vline(xintercept = max.num.of.steps.interv,
color = "red", linetype = "dashed", size = 1) + labs(title = "Time series of the 5-minute interval and the average number of steps taken, \n averaged across all days") +
labs(x = "5-minute interval signature", y = "number of steps ")
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed", size = 1) +
geom_hline(yintercept = total.median, color = "red", linetype = "dashed", size = 1) +
labs(title = "Total number of steps for each particular day") +
labs(x = "Date", y = "Total number of steps")
ggplot(total.steps.per.day, aes(date, total))
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black")
?geom_bar
?aes
?geom_bar
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar(colour = "black")
?geom_bar
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar()
ggplot(total.steps.per.day, aes(date, total))
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed", size = 1) +
geom_hline(yintercept = total.median, color = "red", linetype = "dashed", size = 1) +
labs(title = "Total number of steps for each particular day") +
labs(x = "Date", y = "Total number of steps")
ggplot2(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed", size = 1) +
geom_hline(yintercept = total.median, color = "red", linetype = "dashed", size = 1) +
labs(title = "Total number of steps for each particular day") +
labs(x = "Date", y = "Total number of steps")
?ggplot
ggplot(total.steps.per.day, aes(date, total))
+
geom_bar(fill = "chartreuse", colour = "black")
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black")
?ggplot
?stat_count()
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black", stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed", size = 1) +
geom_hline(yintercept = total.median, color = "red", linetype = "dashed", size = 1) +
labs(title = "Total number of steps for each particular day") +
labs(x = "Date", y = "Total number of steps")
ggplot(total.steps.per.day, aes(date, total)) +
stat_count(geom = "bar")
ggplot2(total.steps.per.day, aes(date, total))
library(ggplot2)
ggplot2(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black", stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed", size = 1) +
geom_hline(yintercept = total.median, color = "red", linetype = "dashed", size = 1) +
labs(title = "Total number of steps for each particular day") +
labs(x = "Date", y = "Total number of steps")
?ggplot2
download.packages("ggplot2")
download.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(total.steps.per.day, aes(date, total)) +
geom_bar(fill = "chartreuse", colour = "black", stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = total.mean, color = "brown", linetype = "dashed", size = 1) +
geom_hline(yintercept = total.median, color = "red", linetype = "dashed", size = 1) +
labs(title = "Total number of steps for each particular day") +
labs(x = "Date", y = "Total number of steps")
qplot(interval, avg.intvl, data = avg.intvl.steps) + geom_line() + geom_vline(xintercept = max.num.of.steps.interv,
color = "red", linetype = "dashed", size = 1) + labs(title = "Time series of the 5-minute interval and the average number of steps taken, \n averaged across all days") +
labs(x = "5-minute interval signature", y = "number of steps ")
ggplot(interval, avg.intvl, data = avg.intvl.steps) + geom_line() + geom_vline(xintercept = max.num.of.steps.interv,
color = "red", linetype = "dashed", size = 1) + labs(title = "Time series of the 5-minute interval and the average number of steps taken, \n averaged across all days") +
labs(x = "5-minute interval signature", y = "number of steps ")
avg.intvl.steps <- amd %>% group_by(interval) %>% summarise(avg.intvl = mean(steps,
na.rm = T))
# Find out which 5-minute interval contains the maximum number of steps
max.num.of.steps.interv.ind <- which(avg.intvl.steps$avg.intvl == max(avg.intvl.steps$avg.intvl))
max.num.of.steps.interv <- avg.intvl.steps[max.num.of.steps.interv.ind, 1]
ggplot(interval, avg.intvl, data = avg.intvl.steps) + geom_line() + geom_vline(xintercept = max.num.of.steps.interv,
color = "red", linetype = "dashed", size = 1) + labs(title = "Time series of the 5-minute interval and the average number of steps taken, \n averaged across all days") +
labs(x = "5-minute interval signature", y = "number of steps ")
ggplot(avg.intvl.steps, avg.intvl, data = avg.intvl.steps) + geom_line() + geom_vline(xintercept = max.num.of.steps.interv,
color = "red", linetype = "dashed", size = 1) + labs(title = "Time series of the 5-minute interval and the average number of steps taken, \n averaged across all days") +
labs(x = "5-minute interval signature", y = "number of steps ")
gplot(avg.intvl.steps, avg.intvl, data = avg.intvl.steps) + geom_line() + geom_vline(xintercept = max.num.of.steps.interv,
color = "red", linetype = "dashed", size = 1) + labs(title = "Time series of the 5-minute interval and the average number of steps taken, \n averaged across all days") +
labs(x = "5-minute interval signature", y = "number of steps ")
?gplot
gplot
?gplot
